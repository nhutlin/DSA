// void fileexport(int *a, int n) 
// {
//     ofstream file;
//     file.open("test1.txt");
//     file << n << endl;
//     if(file.is_open()) {
//         for(int i = 0; i < n; i++) {
//             file << a[i] << endl;
//         }
//         file.close();
//     }
// }
double timethuchienLinear(int *a, int n, int X)
{
    double period;
    clock_t start_time, end_time;
    start_time = clock();
    LinearSearch(a, n, X);
    end_time = clock();
    period = ((double)(end_time - start_time)) / (CLOCKS_PER_SEC);
    return period;

}

double timethuchienBinary(int *a, int n, int X)
{
    double period;
    clock_t start_time, end_time;
    start_time = clock();
    BinarySearch(a, n, X);
    end_time = clock();
    period = ((double)(end_time - start_time)) / (CLOCKS_PER_SEC);
    return period;

}

void insertionSort(int *arr, int n)
{
   int key, j;
   for (int i = 1; i < n; i++){
       key = arr[i];
       j = i - 1;
       while (j >= 0 && arr[j] > key)
       {
           arr[j + 1] = arr[j];
           j = j - 1;
       }
       arr[j + 1] = key;
   }
}

double timethuchienInserttionSort(int *a, int n)
{
    double period;
    clock_t start_time, end_time;
    start_time = clock();
    insertionSort(a, n);
    end_time = clock();
    period = ((double)(end_time - start_time)) / (CLOCKS_PER_SEC);
    return period;
}



 


double timethuchienQuickSort(int *a, int n)
{
    double period;
    clock_t start_time, end_time;
    start_time = clock();
    quickSort(a, 0, n - 1);
    end_time = clock();
    period = ((double)(end_time - start_time)) / (CLOCKS_PER_SEC);
    return period;
